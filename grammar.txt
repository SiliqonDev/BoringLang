statements: NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr      : KEYWORD:var IDENTIFIER EQUALS expr
          : comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*

comp-expr : KEYWORD:var comp-expr
          : arith-expr ((EE|LR|GT|LTE|GTE) arith-expr)*

arith-expr: term ((PLUS|MINUS) term)*

term      : factor ((MUL|DIV) factor)*

factor    : (PLUS|MINUS) factor
          : POW

power     : call (POW factor)*

call      : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom      : INT|FLOAT|STRING|IDENTIFIER
          : LPAR expr RPAR
          : list-expr
          : if-expr
          : for-expr
          : while-expr
          : func-def

list-expr : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr   : KEYWORD:if expr KEYWORD:then
            (expr if-expr-b|if-expr-c?)
          | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr   : KEYWORD:if expr KEYWORD:then
            (expr if-expr-b|if-expr-c?)
          | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-b : KEYWORD:elif expr KEYWORD:then
            (expr if-expr-b|if-expr-c?)
          | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c)

if-expr-c : KEYWORD:else expr KEYWORD:then
            expr
          | (NEWLINE statements KEYWORD:end)

for-expr  : KEYWORD:for IDENTIFIER EQUALS expr KEYWORD:to expr
            (KEYWORD:step expr)? KEYWORD:do
            expr
            | (NEWLINE statements KEYWORD:end)

while-expr: KEYWORD:while expr KEYWORD:do
            expr
            | (NEWLINE statements KEYWORD:end)

func-def  : KEYWORD:fn IDENTIFIER?
            LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
            (ARROW expr)
            | (NEWLINE statements KEYWORD:end)

* 0 or more of
? optional